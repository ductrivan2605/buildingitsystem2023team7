<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/user/readingPage.css">
</head>
<body>
  <div>
    <div id="pdf-viewer"></div>

    <p>Page: <span id="page-num"></span> / <span id="page-count"></span></p>
    <div class="page-progress">
    <progress id="reading-progress" value="0" max="100"></progress>
  </div>
    <div class="navigation-buttons">
      <button id="prev-page">Previous</button>
      <button id="next-page">Next</button>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const pdfViewer = document.getElementById('pdf-viewer');
      const pdfDataUri = '<%= pdfDataUri %>';
      const userId = '<%= userId %>'
  
      let currentPage = parseInt(localStorage.getItem(`${userId}_currentPage`)) || 1;
      let pdfDoc = null;

      const loadPDF = async () => {
        try {
          const pdf = atob(pdfDataUri.split(',')[1]);
          pdfDoc = await pdfjsLib.getDocument({ data: pdf }).promise;
          renderPage(currentPage);
        } catch (error) {
          console.error('Error loading PDF:', error);
        }
      };

      const renderPage = async (num) => {
        pdfViewer.innerHTML = '';
        if (num <= pdfDoc.numPages) {
          const page = await pdfDoc.getPage(num);
          const viewport = page.getViewport({ scale: 1.5 });
          const canvas = document.createElement('canvas');
          const context = canvas.getContext('2d');
          canvas.height = viewport.height;
          canvas.width = viewport.width;

          pdfViewer.appendChild(canvas);

          const renderContext = {
            canvasContext: context,
            viewport: viewport
          };
          page.render(renderContext);

          document.getElementById('page-num').textContent = `${currentPage}`;
          document.getElementById('page-count').textContent = pdfDoc.numPages;
          const progress = ((num - 1) / (pdfDoc.numPages - 1)) * 100;
          document.getElementById('reading-progress').value = progress;
        }
      };

      const updateReadingProgress = (currentPage) => {
        localStorage.setItem(`${userId}_currentPage`, currentPage);
        // Make an API call to update the reading progress on the server
        fetch(`/api/${userId}/${slug}/update-progress`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ currentPage }),
        })
          .then(response => {
            if (response.ok) {
              console.log('Reading progress updated successfully');
            } else {
              console.error('Failed to update reading progress');
            }
          })
          .catch(error => {
            console.error('Error updating reading progress:', error);
          });
      };
    

      const handlePageChange = (newPage) => {
        if (newPage !== currentPage) {
          updateReadingProgress(newPage);
          currentPage = newPage;
        }
      };

      document.getElementById('prev-page').addEventListener('click', function() {
        if (currentPage > 1) {
          currentPage--;
          renderPage(currentPage);
          handlePageChange(currentPage);
        }
      });

      document.getElementById('next-page').addEventListener('click', function() {
        if (currentPage < pdfDoc.numPages) {
          currentPage++;
          renderPage(currentPage);
          handlePageChange(currentPage);
        }
      });

      document.addEventListener('keydown', function(event) {
        switch (event.key) {
          case 'ArrowLeft':
            if (currentPage > 1) {
              currentPage--;
              renderPage(currentPage);
              handlePageChange(currentPage);
            }
            break;
          case 'ArrowRight':
            if (currentPage < pdfDoc.numPages) {
              currentPage++;
              renderPage(currentPage);
              handlePageChange(currentPage);
            }
            break;
        }
      });

      // Register the beforeunload event listener
      window.addEventListener('beforeunload', function(event) {
        updateReadingProgress(currentPage);
      });

      loadPDF();
    });
  </script>  
</body>
</html>
