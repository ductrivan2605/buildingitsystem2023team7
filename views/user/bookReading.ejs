<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/user/readingPage.css">
</head>
<body>
  <div>
    <div id="pdf-viewer"></div>
    <p>Page: <span id="page-num"></span> / <span id="page-count"></span></p>
    <progress id="reading-progress" value="0" max="100"></progress>
    <div id="page-navigation">
      <button class="page-navigation-btn" id="prev-page"> ◁ </button>
      <button class="page-navigation-btn" id="next-page"> ▷ </button>
    </div>
  </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const pdfViewer = document.getElementById('pdf-viewer');
      const pdfDataUri = '<%= pdfDataUri %>'; // Get the base64 PDF data URI passed from the server
  
      let currentPage = 1;
      let pdfDoc = null;
      let renderContext = null;
  
      const loadPDF = async () => {
        try {
          const pdf = atob(pdfDataUri.split(',')[1]);
          pdfDoc = await pdfjsLib.getDocument({ data: pdf }).promise;
          renderPage(currentPage);
        } catch (error) {
          console.error('Error loading PDF:', error);
        }
      };

      const updateProgress = async (currentPage) => {
        const slug = '<%= book.slug %>'; // Get the book slug from your rendered book object
        try {
          await fetch(`/api/books/${slug}/update-progress`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ slug, currentPage }),
          });
        } catch (error) {
          console.error('Failed to update reading progress:', error);
        }
      };

      const renderPage = async (num) => {
        const page = await pdfDoc.getPage(num);
        const viewport = page.getViewport({ scale: 1.5 });
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.height = viewport.height;
        canvas.width = viewport.width;
  
        if (renderContext) {
          pdfViewer.replaceChild(canvas, pdfViewer.firstChild);
        } else {
          pdfViewer.appendChild(canvas);
        }
  
        renderContext = {
          canvasContext: context,
          viewport: viewport
        };
        page.render(renderContext);
  
        document.getElementById('page-num').textContent = num;
        document.getElementById('page-count').textContent = pdfDoc.numPages;
        const progress = ((num - 1) / (pdfDoc.numPages - 1)) * 100;
        document.getElementById('reading-progress').value = progress;

        await updateProgress(num); // Update the progress when rendering a new page
      };
  
      document.getElementById('prev-page').addEventListener('click', function() {
        if (currentPage > 1) {
          currentPage--;
          renderPage(currentPage);
        }
      });
  
      document.getElementById('next-page').addEventListener('click', function() {
        if (currentPage < pdfDoc.numPages) {
          currentPage++;
          renderPage(currentPage);
        }
      });
  
      loadPDF();
    });
  </script>
  
</body>
</html>
