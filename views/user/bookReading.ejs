<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/user/readingPage.css">
</head>
<body>
  <div>
    <div id="pdf-viewer"></div>
    <p>Page: <span id="page-num"></span> / <span id="page-count"></span></p>
    <div class="page-progress">
      <progress id="reading-progress" value="0" max="100"></progress>
    </div>
    <div class="navigation-buttons">
      <form action="/user-reading-progress/<%= userId %>/<%= book.slug %>/update-progress" method="post">
        <button type="submit" name="action" value="prev" id="prev-page">Previous</button>
        <button type="submit" name="action" value="next" id="next-page">Next</button>
      </form>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const pdfViewer = document.getElementById('pdf-viewer');
      const pdfDataUri = '<%= pdfDataUri %>';
      const userId = '<%= userId %>';
      const slug = '<%= book.slug %>';
      const storageKey = `${userId}_${slug}_currentPage`;

      let currentPage = parseInt(localStorage.getItem(storageKey)) || 1;
      let pdfDoc = null;

      const loadPDF = async () => {
        try {
          const pdf = atob(pdfDataUri.split(',')[1]);
          pdfDoc = await pdfjsLib.getDocument({ data: pdf }).promise;
          renderPage(currentPage);
        } catch (error) {
          console.error('Error loading PDF:', error);
        }
      };

      const renderPage = async (num) => {
        pdfViewer.innerHTML = '';
        if (num <= pdfDoc.numPages) {
          const page = await pdfDoc.getPage(num);
          const viewport = page.getViewport({ scale: 1.5 });
          const canvas = document.createElement('canvas');
          const context = canvas.getContext('2d');
          canvas.height = viewport.height;
          canvas.width = viewport.width;

          pdfViewer.appendChild(canvas);

          const renderContext = {
            canvasContext: context,
            viewport: viewport
          };
          page.render(renderContext);

          document.getElementById('page-num').textContent = `${currentPage}`;
          document.getElementById('page-count').textContent = pdfDoc.numPages;
          const progress = ((num - 1) / (pdfDoc.numPages - 1)) * 100;
          document.getElementById('reading-progress').value = progress;
        }
      };

      const updateReadingProgress = async (currentPage) => {
        console.log(`Updating progress for user ${userId}, book ${slug}, page ${currentPage}`);
        localStorage.setItem(storageKey, currentPage);
      };

      const handlePageChange = async (newPage) => {
        if (newPage !== currentPage) {
          await updateReadingProgress(newPage);
          currentPage = newPage;
        }
      };

      document.getElementById('prev-page').addEventListener('click', async function(e) {
        e.preventDefault();
        if (currentPage > 1) {
          currentPage--;
          await renderPage(currentPage);
          await handlePageChange(currentPage);
        }
      });

      document.getElementById('next-page').addEventListener('click', async function(e) {
        e.preventDefault();
        if (currentPage < pdfDoc.numPages) {
          currentPage++;
          await renderPage(currentPage);
          await handlePageChange(currentPage);
        }
      });

      document.addEventListener('keydown', async function(event) {
        switch (event.key) {
          case 'ArrowLeft':
            if (currentPage > 1) {
              currentPage--;
              await renderPage(currentPage);
              await handlePageChange(currentPage);
            }
            break;
          case 'ArrowRight':
            if (currentPage < pdfDoc.numPages) {
              currentPage++;
              await renderPage(currentPage);
              await handlePageChange(currentPage);
            }
            break;
        }
      });

      // Register the beforeunload event listener
      window.addEventListener('beforeunload', async function(event) {
        await updateReadingProgress(currentPage);
      });

      loadPDF();
    });
  </script>  
</body>
</html>
